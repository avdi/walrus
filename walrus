#!/bin/bash

default_port=8080
declare -A content_types=([js]=text/javascript [html]=text/html)

# Set up a logging system that can route around output redirection
logfd=10                        # FD #10 is probably free
eval "exec ${logfd}>&0"         # duplicate stdout 

# Logs its argument
say() {
    echo "$1" >&${logfd}
}

while getopts "p:" opt; do
    case ${opt} in
        p) 
            echo "Setting port to ${OPTARG}"
            port=${OPTARG} ;;
    esac
done

killpids() {
    say "Killing PIDS"
    for pid in `ls pids`; do
        if ps ${pid} > /dev/null; then
            echo "Killing ${pid}"
            kill ${pid}
        fi
        echo "Cleaning up pidfile pids/${pid}"
        rm pids/${pid}
    done
}

killfifos() {
    say "Killing FIFOs"
    for fifo in `find fifos -type p`; do
        poison_fifo ${fifo}
    done
}

setup() {
    echo "Setting up"
    rm -rf fifos
    mkdir -p fifos
    mkdir -p fifos/subscribers
    mkdir -p pids
    killpids
    setup_schema || exit 1
}

teardown() {
    say "Tearing down..."
    killfifos
    sleep 1
    killpids
    rm -rf fifos
    rm -rf pids
    say "Finished tearing down. Goodbye!"
}

dbexec() {
    psql -p ${PGPORT:-5432} -f - $* walrus
}

setup_schema() {
    say "Setting up schema"
    dbexec <<EOF
DROP TABLE IF EXISTS messages;
CREATE TABLE messages (
    id        serial PRIMARY KEY,
    content   json,
    posted_at timestamptz DEFAULT now()
);
EOF
}

mkpid() {
    mkdir -p pids
    touch pids/$1
}

rmpid() {
    rm -f pids/$1
}

handle_request() {
    local ncpid="$1"
    local req_line
    read -a req_line
    say "Received ${req_line[@]}"
    send main "continue"
    # TODO use multiple variables to read instead
    local method=${req_line[0]}
    local path=${req_line[1]}
    say "method: ${method}"
    say "path: ${path}"
    say "Serving response"
    if [ "${path}" == "/" ]; then
        path="/index.html"
    fi
    if [ -f "public/${path}" ]; then
        serve_file "${path}"
        say "Finished handling request" 
        return
    fi
    case ${path} in
        /updates)
            handle_updates "$ncpid"
            ;;
        /messages)
            # upcase before comparing
            case ${method^^} in
                "POST")
                    get_request_body | handle_post_message 
                    ;;
                *)
                    printf "HTTP/1.1 405 Method Not Allowed\r\nAllow: POST\r\n\r\nMethod not allowed"
                    ;;
            esac
            ;;
        /recent)
            handle_recent
            ;;
        /echo/*)
            printf "HTTP/1.1 200 OK\r\n\r\nHi! You requested ${method} ${path}"
            ;;

        *) 
            printf "HTTP/1.1 404 Not found\r\n\r\n Not found"
            ;;
    esac
    say "Finished handling request" 
}

serve_file() {
    local path=$1
    local file="public/${path}"
    local length=`wc -c < ${file}`
    local ext=${file##*.}
    local type=${content_types[${ext}]}

    # for whatever reason browsers don't work so well with
    # data sent piecemeal via netcat. We need to send it all
    # in one big lump. Sticking buffer(1) in front of netcat
    # worked well, but it broke SSE. So at least for now we're
    # buffering up in a tempfile.
    local body=`tempfile`
    printf "HTTP/1.1 200 OK\r\n" >> ${body}
    printf "Content-Type: ${type}\r\n" >> ${body}
    printf "Content-Length: ${length}\r\n\r\n" >> ${body}
    cat ${file} >> ${body}
    cat ${body}
    rm ${body}
}

# There is a nasty chicken/egg problem here. We can't always respond
# until we see the whole request. But until we respond and close the
# filehandles, the input filehandle will not be in an EOF state. Which
# means things like cat(1) and sed(1) will just hang on it forever.
#
# We can read lines off it one at a time with 'read'... except that
# the body may not end with a newline. And read doesn't return until
# it sees a newline. So it hangs without returning the body, even
# though a body has been sent.
#
# To get around this, we isolate the Content-Length from the
# headers. Then we use the -N version of read to read *exactly* the
# length of the body, ignoring newlines.
#
# Of course, this means that without Content-Length, we're
# screwed. But that's just the sort of thing that happens when you
# decide to write a webserver based on netcat.
get_request_body() {
    local line
    local length
    say "looking for request body"
    while read key value; do
        if [ "${key}" == "Content-Length:" ]; then
            # Must filter out CR!
            length=`echo "${value}" | sed 's/\r//'`
            say "Content-Length is ${length}"
        fi
        if [ "${key}" == `printf "\r"` ]; then
            say "found terminator"
            break
        fi
    done
    if [ -n "${length}" ]; then
        read -N "${length}" body
        say "Found body:"
        say "${body}"
        echo ${body}
    else
        say "No Content-Length found"
    fi
    say "Finished looking for request body"
}

handle_post_message() {
    say "Handling message post"
    body=`cat | sed "s/'/''/g"`
    cmd="INSERT INTO messages (content) VALUES('${body}');"
    say "${cmd}"
    # gotta be careful what we're putting on stdout
    echo "${cmd}" | dbexec > /dev/null
    printf "HTTP/1.1 201 Accepted\r\nContent-Type: application/json\r\n\r\n$(recent_messages_json)"
    # TODO factor this out and maybe use parallel
    for fifo in `ls fifos/subscribers/*`; do
        say "Notifying ${fifo}"
        echo "ping" > ${fifo} &
    done
    say "Finished handling message post"
}

handle_updates() {
    local ncpid="$1"
    local fifo=fifos/subscribers/${ncpid}
    say "Subscriber ${fifo} serving events"
    printf "HTTP/1.1 200 OK\r\n"
    printf "Content-Type: text/event-stream\r\n\r\n"
    mkfifo ${fifo}
    while read_fifo ${fifo} message; do
        say "Subscriber ${fifo} sending client event"
        printf "data: $(recent_messages_json)\n\n"
    done
    rm -f ${fifo}
    say "Subscriber ${fifo} finished"
}

handle_recent() {
    say "Serving recent messages"
    local body=`tempfile`
    printf "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n" >> ${body}
    recent_messages_json >> ${body}
    cat ${body}
}

recent_messages_json() {
    local query="WITH rows AS (SELECT * from messages ORDER BY posted_at DESC LIMIT 10)
                 SELECT row_to_json(rows) FROM rows;"
    local xform="[ .[] | {id, posted_at, user: .content.user, text: .content.text}]"
    echo "${query}" | dbexec -A -q -t | jq -s -c "${xform}"
}

serve_with_coproc() {
    local handler
    local nc
    local pid=$$
    local nc_PID
    # starting to think having more than one coproc concurrently is a
    # terrible idea
    coproc nc ( netcat -C -4 -v -l ${port:-${default_port}} )
    say "netcat started with pid ${nc_PID}"
    mkpid ${nc_PID}
    handle_request ${nc_PID} <&${nc[0]} >&${nc[1]}
    # close file descriptors
    say "Closing netcat filehandles"
    eval "exec ${nc[1]}>&-"     
    eval "exec ${nc[0]}<&-"
    say "Waiting for ${nc_PID} to terminate"
    wait ${nc_PID}
    say "netcat process has finished"
}

# We can't afford A-list Actors. But we have John Agar!
agar() {
    local name=$1
    shift 1
    say "Spawning actor: ${name}"
    { 
        local fifoname=fifos/${name}-${BASHPID}
        if [ -f ${fifoname} ]; then
            rm ${fifoname}
        fi
        mkfifo ${fifoname}
        say "Starting actor ${name} with command '$*' listening on ${fifoname}"
        self=${name} queue=${fifoname} $*
        say "Actor ${name} has finished, cleaning up FIFO ${fifoname}"
        rm -f ${fifoname}
    } &
    local pid=$!
    mkpid ${pid}
    say "Spawned actor: ${name}"
}

send() {
    local dest=$1
    shift
    local fifos=(`ls fifos/${dest}*`)
    local fifocount=${#fifos[*]}
    # Pick a random matching FIFO to send to, if there are >1
    local randfifo=${fifos[$(( ${RANDOM} % ${fifocount} ))]}
    say "'${*}' -> ${dest} (${randfifo})"
    # Opening a read/write file descriptor magically makes it possible
    # to do nonblocking writes to a FIFO
    ( exec 3<>${randfifo}; echo "$*" >&3; )
}

poison_fifo() {
    say "Poisoning FIFO $1"
    echo "POISON" > $1 &
}

read_fifo() {
    fifo=${1:?"FIFO name is required"}
    shift
    firstvar=${1:-REPLY}
    eval "read $*" < ${fifo}
    say "READ ${fifo}: ${firstvar}=${!firstvar}"
    if [ "${!firstvar}" == "POISON" ]; then
        say "FIFO ${fifo} got poisoned!"
        return 1
    else
        return 0
    fi
}

main() {
    while true; do
        say "Starting a new server"
        agar server serve_with_coproc
        say "Waiting for connection"
        if read_fifo ${queue}; then
            say "Main is continuing"
        else
            say "Main is shutting down"
            break
        fi
    done
}

trap teardown EXIT

say "I am the walrus"

setup

agar main main

say "Waiting for main to finish"

wait

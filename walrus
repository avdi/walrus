#!/bin/bash

default_port=8080

# Set up a logging system that can route around output redirection
logfd=10                        # FD #10 is probably free
eval "exec ${logfd}>&0"         # duplicate stdout 

# Logs its argument
say() {
    echo "$1" >&${logfd}
}

while getopts "p:" opt; do
    case ${opt} in
        p) 
            echo "Setting port to ${OPTARG}"
            port=${OPTARG} ;;
    esac
done

setup() {
    echo "Setting up"
    rm -rf fifos
    mkdir -p fifos
    mkdir -p pids
    for pid in `ls pids`; do
        if ps ${pid} > /dev/null; then
            echo "Killing ${pid}"
            kill ${pid}
        fi
        echo "Cleaning up pidfile pids/${pid}"
        rm pids/${pid}
    done
}

mkpid() {
    mkdir -p pids
    touch pids/$1
}

rmpid() {
    rm -f pids/$1
}

handle_request() {
    local ncpid=$1
    local req_line
    read -a req_line
    say "Received ${req_line[@]}"
    send main "continue"
    local method=${req_line[0]}
    local path=${req_line[1]}
    say "method: ${method}"
    say "path: ${path}"
    say "Serving response"
    case ${path} in
        /)
            printf "HTTP/1.1 200 OK\r\n"
            printf "Content-Type: text/html\r\n\r\n"
            cat index.html
            ;;
        /echo/*)
            printf "HTTP/1.1 200 OK\r\n\r\nHi! You requested ${method} ${path}"
            ;;

        *) 
            printf "HTTP/1.1 404 Not found\r\n\r\n Not found"
            ;;
    esac
    say "Finished handling request" 
}

serve_with_coproc() {
    local handler
    local nc
    local pid=$$
    coproc nc ( netcat -C -4 -v -l ${port:-${default_port}} )
    mkpid ${nc_PID}
    handle_request ${nc_PID} <&${nc[0]} >&${nc[1]}
    # close file descriptors
    eval "exec ${nc[1]}>&-"     
    eval "exec ${nc[0]}<&-"
    wait ${nc_PID}
}

agar() {
    local name=$1
    local args=${@:1}
    local fifoname=fifos/${name}
    if [ -f ${fifoname} ]; then
        rm ${fifoname}
    fi
    mkfifo ${fifoname}
    say "${name} is starting"
    self=${name} queue=${fifoname} ${name} ${args[@]} &
    local pid=$!
    mkpid ${pid}
    say "${name} has started"
}

send() {
    local dest=$1
    local message=${*:1}
    say "${dest} <- '${message}'"
    echo "${dest}" > fifos/${dest}
}

main() {
    while true; do
        say "Waiting for connection"
        serve_with_coproc &
        say "Waiting to start another server"
        read < ${queue}
    done
}

say "I am the walrus"

setup

agar main

wait

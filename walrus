#!/bin/bash

default_port=8080

# Set up a logging system that can route around output redirection
logfd=10                        # FD #10 is probably free
eval "exec ${logfd}>&0"         # duplicate stdout 

# Logs its argument
say() {
    echo "$1" >&${logfd}
}

while getopts "p:" opt; do
    case ${opt} in
        p) 
            echo "Setting port to ${OPTARG}"
            port=${OPTARG} ;;
    esac
done

setup() {
    echo "Setting up"
    rm -rf fifos
    mkdir -p fifos
    mkdir -p pids
    for pid in `ls pids`; do
        if ps ${pid} > /dev/null; then
            echo "Killing ${pid}"
            kill ${pid}
        fi
        echo "Cleaning up pidfile pids/${pid}"
        rm pids/${pid}
    done
}

mkpid() {
    mkdir -p pids
    touch pids/$1
}

rmpid() {
    rm -f pids/$1
}

handler() {
    local req=$1
    local res=$2
    echo "Handler running on $req $res"
    local input
    read input <$req
    echo "Got $input"
    echo "Replying"
    printf "HTTP/1.1 200 OK\r\n\r\nHi there!" > $res
    echo "Handler done"
}

handle_request() {
    local ncpid=$1
    local req_line
    read req_line
    say "Received ${req_line}"
    send main "continue"
    say "Serving response"
    printf "HTTP/1.1 200 OK\r\n\r\nHi! I received: ${req_line}"
    say "Finished handling request" 
}

serve_with_coproc() {
    local handler
    local nc
    local pid=$$
    coproc nc ( netcat -C -4 -v -l ${port:-${default_port}} )
    mkpid ${nc_PID}
    # coproc handler ( handle_request $$ )
    # netcat -C -4 -v -l ${port:-${default_port}} <&${handler[0]} >&${handler[1]}
    # coproc handler ( handle_request ${nc_PID} ) <&${nc[0]} >&${nc[1]}
    handle_request ${nc_PID} <&${nc[0]} >&${nc[1]}
    # close file descriptors
    eval "exec ${nc[1]}>&-"     
    eval "exec ${nc[0]}<&-"
    wait ${nc_PID}
}

say "I am the walrus"

setup

agar() {
    local name=$1
    local args=${@:1}
    local fifoname=fifos/${name}
    if [ -f ${fifoname} ]; then
        rm ${fifoname}
    fi
    mkfifo ${fifoname}
    say "${name} is starting"
    self=${name} queue=${fifoname} ${name} ${args[@]} &
    local pid=$!
    mkpid ${pid}
    say "${name} has started"
}

send() {
    local dest=$1
    local message=${*:1}
    say "${dest} <- '${message}'"
    echo "${dest}" > fifos/${dest}
}

main() {
    while true; do
        say "Waiting for connection"
        serve_with_coproc &
        say "Waiting to start another server"
        say "Reading form ${queue}"
        read < ${queue}
    done
}
agar main

wait
